package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"time"
)

type Configuration struct {
	Address      string
	ReadTimeout  int64
	WriteTimeout int64
	Static       string
}

var config Configuration

type AutoGenerated struct {
	MetaData struct {
		OneInformation     string `json:"1. Information"`
		TwoSymbol          string `json:"2. Symbol"`
		ThreeLastRefreshed string `json:"3. Last Refreshed"`
		FourInterval       string `json:"4. Interval"`
		FiveOutputSize     string `json:"5. Output Size"`
		SixTimeZone        string `json:"6. Time Zone"`
	} `json:"Meta Data"`

	TimeSeries1Min interface{} `json:"Time Series (1min)"`
}

func init() {
	loadConfig()
}

func loadConfig() {
	file, err := os.Open("config.json")
	if err != nil {
		fmt.Println("Cannot open config file", err)
	}
	decoder := json.NewDecoder(file)
	config = Configuration{}
	err = decoder.Decode(&config)
	if err != nil {
		fmt.Println("Cannot get configuration from file", err)
	}
}
func main() {
	p("Basic QUANT APP", version(), "started at", config.Address)
	mux := http.NewServeMux()

	//The urls
	mux.HandleFunc("/get/", getdata)

	//Server details
	server := &http.Server{
		Addr:           config.Address,
		Handler:        mux,
		ReadTimeout:    time.Duration(config.ReadTimeout * int64(time.Second)),
		WriteTimeout:   time.Duration(config.WriteTimeout * int64(time.Second)),
		MaxHeaderBytes: 1 << 20,
	}
	server.ListenAndServe()

}

func p(a ...interface{}) {
	fmt.Println(a)
}

func version() string {
	return "0.1"
}

const (
	empty = ""
	tab   = "\t"
)

func getdata(writer http.ResponseWriter, request *http.Request) {
	auto := AutoGenerated{}
	response, err := http.Get("https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=MSFT&interval=1min&apikey=KLMH2VFJ0LCFNOX5")
	if err != nil {
		fmt.Println("Error getting data from alphavantage")
	}
	responsedata, err := ioutil.ReadAll(response.Body)
	if err != nil {
		fmt.Println("Error getting data from alphavantage")
	}
	response.Body.Close()
	json.Unmarshal(responsedata, &auto)
	{
		writer.Header().Set("Content-Type", "application/json")
		writer.WriteHeader(http.StatusOK)
		encoder := json.NewEncoder(writer)
		encoder.SetIndent(empty, tab)
		encoder.Encode(auto)
	}
}
